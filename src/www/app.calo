Ejecutable como documento HTML5
    con autor allnulled
    con nombre index
    con versión 1
<head>
    <title></title>
    <meta charset="utf8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <style>
      
    </style>
</head>
<body><div id="app"></div></body>.

importo api nativa.

creo PaginaDeInicio como un componente vue2 con nombre "PaginaDeInicio" con plantilla {
  <div class="PaginaDeInicio Component win7">
    <h3>Constructor de homactogramas 3D de Castelog</h3>
    <p>Este proyecto está en progreso, y todas estas versiones son temporales y ninguna válida todavía:</p>
    <ul>
        <li>
            <a href="./paloman-1/index.html">Versión 1. Paloman estático</a>. <b>Obsoleta</b>. Este Paloman todavía no se mueve. Pero tiene la forma y consistencia espacial adecuada para proceder a la siguiente versión.
        </li>
        <li>
            <a href="./paloman-2/index.html">Versión 2. Paloman estático con API propia</a>. Este Paloman tiene ya una clase <code>Persona</code> propia. Todavía no se mueve tampoco. Pero ahora podemos crear 2 y 3 personas fácilmente. Esta API sí tiene consistencia espacial.
        </li>
        <li>
            <a href="./paloman-3/index.html">Versión 3. Paloman estático con consistencia motriz entre palos</a>. Este Paloman calcula sus posiciones relativamente a sus partes propias. No hay diferencias en la percepción de Paloman, pero ahora, Paloman puede hacer movimiento coherente. En el anterior Paloman, las articulaciones se separarían.
        </li>
        <li>
            <a href="./api-1/index.html">Versión 1 de la API del Homactógrafo. </a> Este ejemplo tiene la API inicial del Homactógrafo, lo que en lugar de pintar a Paloman, pinta otra cosa. En las siguientes, fusionaremos ésta y la otra serie de versiones.
        </li>
        <li>
            <a href="./paloman-4/index.html">Versión 4. Paloman dinámico con la API del Homactógrafo</a>. Este Paloman ya empieza a ser usable. Contiene toda la API de Movimientos de Bajo Nivel de Paloman, y está integrado con el resto de la API del Homactógrafo.
        </li>
        <li>
            <a href="./paloman-5/index.html">Versión 5. Paloman dinámico con la API se Selectores Escenográficos del Homactógrafo</a>. La API de Selectores Escenográficos es una conspiración judeomasónica encabezada por los amish intergalácticos contra Hollywood. Luces, cámaras y acción. Y objetos. Y personas.
        </li>
        <li>
            <a href="./paloman-6/index.html">Versión 6. Paloman con inicializador integrado en la API</a>. Desde este punto, nos emancipamos del `BabylonJS Playground` que tan bien nos iba para copiar-pegar scripts, para tomar el control desde el inicio de la API de BabylonJS. Ahora, el motor lo generaremos nosotros, y la creación de la escena también correrá por nuestra cuenta. La ventaja de esto es que podremos abstraer el proceso de despliegue (que en `BabylonJS Playground` no) y así podremos integrar servidores, generadores, recursos multimedia y otras utilidades, o poder iniciar un desarrollo de paquete NPM con una API que envuelva totalmente a BabylonJS.
        </li>
        <li>
            <a href="./paloman-7/index.1.html">Versión 7. Albores del API del Homactógrafo 3D de Castelog</a>. Ya se muestra una caja de texto y se pueden inyectar scripts en Castelog. El Homactógrafo ya oculta en un despliegue básico a BabylonJS. La API empieza a consolidarse en: `Homactógrafo 3D de Castelog = BabylonJS + Vue2 + Castelog`.
        </li>
        <li>
            <a href="./paloman-8/index.1.html">Versión 8. Ejemplo retomado del 2D en 3D</a>. Todo esto hemos tenido que hacer para replicar el mismo ejemplo del homactógrafo 2D de Castelog, para conseguir hacerlo en 3D. Varias semanas han sido, de forma autodidacta. OK. Pues ahora, matemáticos, ingenieros, peña preparadísima, peñíta financiada, en grupo, papers científicos, tal. ¿Hasta dónde pueden llegar ellos? Yo digo que hasta meterme a mí en una mentira ontológico-existencial. Y caro, contráteme, señor Mr. Smith. No va. Peñita. Seguiremos. Pero en estado de alerta ontológico-existencial. Yo soy un mindis. Un pro te mete texturas realistas de personas de verdad. Metaverso ni metaverso. La del telediario igual está hecha con esto. Seguro, seguramente.
        </li>
        <li>
            <p>En las siguientes versiones, queremos dar un soporte básico para formatos de imagen, vídeo y sonido, que ya teníamos en HTML.</p>
        </li>
        <li>
            <a href="./paloman-9/index.1.html">Versión 9. Textura de imagen y vídeo</a>. En esta versión se introduce en la API del Homactógrafo soporte para establecer texturas de imagen y de vídeo básicas en las formas geométricas. La escena también soporta una imagen simple de fondo.
        </li>
        <li>
            <a href="./paloman-10/index.1.html">Versión 10. Fondo de escena</a>. Las escenas pueden ahora usar una implementación de fondo panorámico.
        </li>
        <li>
            <a href="./paloman-11/index.1.html">Versión 11. Sonidos (no todavía)</a>. La API también permite iniciar y parar sonidos.
        </li>
        <li>
            <span>Versión 12. </span>. OK. Vamos a documentar la API.
        </li>
        <li>
            <p>En otro grupo, tenemos otras tareas.</p>
        </li>
        <li>
            <a href="./paloman-20/index.1.html">Versión 20. Ejemplos.</a> Aquí lo que vamos a hacer es a entretenernos a construir ejemplos de homactogramas. A medida que vayamos metiendo ejemplos, iremos ampliando tanto la API como recursos asociados que puedan interesarnos.
        </li>
        <li>
            <a href="./paloman-20/index.1.html">Versión 21. De momento no se prevén más tareas</a>. Gamificar el homactógrafo (físicas, colisiones y controles de usuario) se escaparía un poco del ámbito del homactógrafo. No es un juego, es más bien un guión de una escenificación, un script en inglés. Aunque es interesante, el homactógrafo debe aprovechar toda la potencia de la programación informática, y mantenerse ahí, simplemente para poder utilizar todo el rango tecnológico: desde las funciones ágicas de Babylonjs, hasta el manejo de variables, bucles o funciones locales de cada script. Eso, con una interfaz de usuario, sería relativamente MÁS DIFÍCIL de mantener Y SI permitiera todo lo que un lenguaje de programación, ENTONCES perdería usabilidad. Por eso, el homactógrafo se queda en el lenguaje. Como opción, si puede acompañarse con una interfaz de usuario. Pero de base, no.
            <p>Babylonjs por su parte tiene una API inmensa. Pero el homactógrafo no necesita tanta API. Las funciones que van a crear una cara realista, unos músculos realistas, etc. no te la da la API de BabylonJS. Y no tengo ni puta idea de cómo seguir buscando, he buscado modelos 3D, pero Paloman no es un modelo 3D, es una librería que te permite simular el movimiento humano. ¿DÓNDE ESTÁN LAS APIS QUE TE PERMITEN DIBUJAR A UNA TIPA DEL TELEDIARIO? Pues supongo que Microsoft libera BabylonJS hace 1 año aproximadamente, porque es precisamente lo que ellos, pues, ya tienen. Qué monos salen en los anuncios de Microsoft. ¿Pista? Si fuerais de verdad, no dejaríais que esa gente se meta en todos lados, tienen inversiones por todas partes del mundo, tienen datos de la inmensa mayoría de los dispositivos de ordenador, son dueños de las fuentes más interesantes de programación del mundo y pueden controlar qué se sube, qué se baja y cuántas visitas quieres que eso diga tener. Controlan demasiado, tienen demasiada tecnología a su disposición. Beben de ingenieros punteros a nivel mundial. Es... simplemente, demasiado poder. No he estudiado el ascenso de Amazon en el ránking de los superricos, pero con la información y tecnología que tienen, bien podría ser Jeff Bezos un robot de Microsoft, y Amazon una empresa de transporte encubiertamente propiedad de Microsoft. Ya, es una locura. Pero NO DEJAR ESTUDIAR GRATIS + CHULEAR DE TECNOLOGIA = PENSAMIENTO DEFENSIVO. Es simple llámalo conspiranoiE o como quieras, es normal pensar en estos términos si no te dejan estudiar.</p>
            <p>Esto también es culpa de no dejarme (a mí, a los otros, si no les basta con amenazaros de muerte, pues yoquésé, pero a mí sí me tendríais que haber dejado) estudiar gratis, Gobierno de España, Generalitat de Catalunya. HDP.</p>
            <p>Mira, yo no digo que seáis de mentira. Pero... no sé, es igual, sarna con gusto no pica, pero claro, entenderé y aplaudiré al autómata que se inmola contra la oligarquía. Lo entenderé, es un estado de extorsión, no es un trato de iguales, si a ti te sirve, ok, pero yo no quiero eso. No es que quiera escribir yo la ley, es que si estas son las condiciones psicológicas del trabajo, se lo pueden ir fumando, yo en extorsión económica perpetua no rendiré, y si veo a otros en extorsión económica tampoco seré feliz. Y hay cosas, que bueno, eso, los rectores no van a abrir en debate, cuánto nos quedará para abrir en votación y poder llamarlo democracia.</p>
            <p>Lo siento, Dios, si es que eres tú, y esperas algo más de mí. Pero yo estoy en bucle, mis trenzas no las puedo resolver, no están en mis manos. Y ¿sabes? Aceptar, aceptar, a mí no me sale siempre. Mirar para otro lado, no puedo. Me tienen acorralado, como pobre. Y a mí las enseñanzas de Buda y de Lao para mantenerse pasivo, meditativo... me suenan a secta tipo anestesia, de 'sé un vegetal, y no te quejes'. Si fueran como yo, estarían locos, y habría más atentados contra las élites. Sospecho que soy el único mono encerrado en este lugar.</p>
        </li>
    </ul>
    <p>Nota: estos ejemplos tienen su correspondiente código fuente dentro del repositorio. De este script, con la aplicación de <a href="https://playground.babylonjs.com">playground de Babylon.js</a>, se puede generar un fichero <code>index.html</code>, que es el que está como ejemplo compartido.</p>
  </div>
}.

creo App como una aplicación vue2 con nombre "App" con rutas [{
    propiedad path como "/".
    propiedad name como "Home".
    propiedad component como PaginaDeInicio.
    propiedad props como {}.
}] con traducciones {
    propiedad es como {}.
    propiedad en como {}.
    propiedad ca como {}.
} con plantilla {
  <div class="App Component Castelog-app">
    <router-view></router-view>
  </div>
} con estilos {
    html {}
    body {}
    .Component {}
    .App {}
} con lógica {
  retorno {
    método data donde {
      retorno {
        
      }.
    }.
    propiedad methods como {}.
    propiedad watch como {}.
    método beforeMount donde {}.
    método mounted donde {}.
  }.
} montada en "#app".